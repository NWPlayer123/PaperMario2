#pragma once

#include <dolphin/types.h>

#pragma enumsalwaysint off
typedef enum EventOpcode {
    OPCODE_NEXT = 0,
    OPCODE_END_SCRIPT = 1,
    OPCODE_END_EVT = 2,
    OPCODE_LBL = 3,
    OPCODE_GOTO = 4,
    OPCODE_DO = 5,
    OPCODE_WHILE = 6,
    OPCODE_DO_BREAK = 7,
    OPCODE_DO_CONTINUE = 8,
    OPCODE_WAIT_FRM = 9,
    OPCODE_WAIT_MSEC = 10,
    OPCODE_HALT = 11,
    OPCODE_IF_STR_EQUAL = 12,
    OPCODE_IF_STR_NOT_EQUAL = 13,
    OPCODE_IF_STR_SMALL = 14,
    OPCODE_IF_STR_LARGE = 15,
    OPCODE_IF_STR_SMALL_EQUAL = 16,
    OPCODE_IF_STR_LARGE_EQUAL = 17,
    OPCODE_IFF_EQUAL = 18,
    OPCODE_IFF_NOT_EQUAL = 19,
    OPCODE_IFF_SMALL = 20,
    OPCODE_IFF_LARGE = 21,
    OPCODE_IFF_SMALL_EQUAL = 22,
    OPCODE_IFF_LARGE_EQUAL = 23,
    OPCODE_IF_EQUAL = 24,
    OPCODE_IF_NOT_EQUAL = 25,
    OPCODE_IF_SMALL = 26,
    OPCODE_IF_LARGE = 27,
    OPCODE_IF_SMALL_EQUAL = 28,
    OPCODE_IF_LARGE_EQUAL = 29,
    OPCODE_IF_FLAG = 30,
    OPCODE_IF_NOT_FLAG = 31,
    OPCODE_ELSE = 32,
    OPCODE_END_IF = 33,
    OPCODE_SWITCH = 34,
    OPCODE_SWITCHI = 35,
    OPCODE_CASE_EQUAL = 36,
    OPCODE_CASE_NOT_EQUAL = 37,
    OPCODE_CASE_SMALL = 38,
    OPCODE_CASE_LARGE = 39,
    OPCODE_CASE_SMALL_EQUAL = 40,
    OPCODE_CASE_LARGE_EQUAL = 41,
    OPCODE_CASE_ETC = 42,
    OPCODE_CASE_OR = 43,
    OPCODE_CASE_AND = 44,
    OPCODE_CASE_FLAG = 45,
    OPCODE_CASE_END = 46,
    OPCODE_CASE_BETWEEN = 47,
    OPCODE_SWITCH_BREAK = 48,
    OPCODE_END_SWITCH = 49,
    OPCODE_SET = 50,
    OPCODE_SETI = 51,
    OPCODE_SETF = 52,
    OPCODE_ADD = 53,
    OPCODE_SUB = 54,
    OPCODE_MUL = 55,
    OPCODE_DIV = 56,
    OPCODE_MOD = 57,
    OPCODE_ADDF = 58,
    OPCODE_SUBF = 59,
    OPCODE_MULF = 60,
    OPCODE_DIVF = 61,
    OPCODE_SET_READ = 62,
    OPCODE_READ = 63,
    OPCODE_READ2 = 64,
    OPCODE_READ3 = 65,
    OPCODE_READ4 = 66,
    OPCODE_READ_N = 67,
    OPCODE_SET_READF = 68,
    OPCODE_READF = 69,
    OPCODE_READF2 = 70,
    OPCODE_READF3 = 71,
    OPCODE_READF4 = 72,
    OPCODE_READF_N = 73,
    OPCODE_SET_USER_WRK = 74,
    OPCODE_SET_USER_FLG = 75,
    OPCODE_ALLOC_USER_WRK = 76,
    OPCODE_AND = 77,
    OPCODE_ANDI = 78,
    OPCODE_OR = 79,
    OPCODE_ORI = 80,
    OPCODE_SET_FRAME_FROM_MSEC = 81,
    OPCODE_SET_MSEC_FROM_FRAME = 82,
    OPCODE_SET_RAM = 83,
    OPCODE_SET_RAMF = 84,
    OPCODE_GET_RAM = 85,
    OPCODE_GET_RAMF = 86,
    OPCODE_SETR = 87,
    OPCODE_SETRF = 88,
    OPCODE_GETR = 89,
    OPCODE_GETRF = 90,
    OPCODE_USER_FUNC = 91,
    OPCODE_RUN_EVT = 92,
    OPCODE_RUN_EVT_ID = 93,
    OPCODE_RUN_CHILD_EVT = 94,
    OPCODE_DELETE_EVT = 95,
    OPCODE_RESTART_EVT = 96,
    OPCODE_SET_PRI = 97,
    OPCODE_SET_SPD = 98,
    OPCODE_SET_TYPE = 99,
    OPCODE_STOP_ALL = 100,
    OPCODE_START_ALL = 101,
    OPCODE_STOP_OTHER = 102,
    OPCODE_START_OTHER = 103,
    OPCODE_STOP_ID = 104,
    OPCODE_START_ID = 105,
    OPCODE_CHK_EVT = 106,
    OPCODE_INLINE_EVT = 107,
    OPCODE_INLINE_EVT_ID = 108,
    OPCODE_END_INLINE = 109,
    OPCODE_BROTHER_EVT = 110,
    OPCODE_BROTHER_EVT_ID = 111,
    OPCODE_END_BROTHER = 112,
    OPCODE_DEBUG_PUT_MSG = 113,
    OPCODE_DEBUG_MSG_CLEAR = 114,
    OPCODE_DEBUG_PUT_REG = 115,
    OPCODE_DEBUG_NAME = 116,
    OPCODE_DEBUG_REM = 117,
    OPCODE_DEBUG_BP = 118
} EventOpcode;
#pragma enumsalwaysint on

// negative 10s * 1000000
#define EVTDAT_ADDR_MAX -270 * 1000000
#define EVTDAT_POINTER_MAX -250 * 1000000
#define EVTDAT_FLOAT_MAX -220 * 1000000
#define EVTDAT_UF_MAX -200 * 1000000
#define EVTDAT_UW_MAX -180 * 1000000
#define EVTDAT_GSW_MAX -160 * 1000000
#define EVTDAT_LSW_MAX -140 * 1000000
#define EVTDAT_GSWF_MAX -120 * 1000000
#define EVTDAT_LSWF_MAX -100 * 1000000
#define EVTDAT_GF_MAX -80 * 1000000
#define EVTDAT_LF_MAX -60 * 1000000
#define EVTDAT_GW_MAX -40 * 1000000
#define EVTDAT_LW_MAX -20 * 1000000

#define EVTDAT_FLOAT_BASE 230 * 1000000
#define EVTDAT_UF_BASE 210 * 1000000
#define EVTDAT_UW_BASE 190 * 1000000
#define EVTDAT_GSW_BASE 170 * 1000000
#define EVTDAT_LSW_BASE 150 * 1000000
#define EVTDAT_GSWF_BASE 130 * 1000000
#define EVTDAT_LSWF_BASE 110 * 1000000
#define EVTDAT_GF_BASE 90 * 1000000
#define EVTDAT_LF_BASE 70 * 1000000
#define EVTDAT_GW_BASE 50 * 1000000
#define EVTDAT_LW_BASE 30 * 1000000

#define UF(id) (id - EVTDAT_UF_BASE)
#define UW(id) (id - EVTDAT_UW_BASE)
#define GSW(id) (id - EVTDAT_GSW_BASE)
#define LSW(id) (id - EVTDAT_LSW_BASE)
#define GSWF(id) (id - EVTDAT_GSWF_BASE)
#define LSWF(id) (id - EVTDAT_LSWF_BASE)
#define GF(id) (id - EVTDAT_GF_BASE)
#define LF(id) (id - EVTDAT_LF_BASE)
#define GW(id) (id - EVTDAT_GW_BASE)
#define LW(id) (id - EVTDAT_LW_BASE)

typedef enum EvtStatus {
	stopwarning
} EvtStatus;

#define EVT_RETURN_BLOCK 0
#define EVT_RETURN_YIELD 1
#define EVT_RETURN_DONE 2
#define EVT_RETURN_REPEAT 3
#define EVT_RETURN_FINISH 255

s32 evtmgrCmd(struct EventEntry* entry);
s32 evtGetValue(struct EventEntry* entry, s32 index);
s32 evtGetNumber(struct EventEntry* entry, s32 index);
s32 evtSetValue(struct EventEntry* entry, s32 index, s32 value);
f32 evtGetFloat(struct EventEntry* entry, s32 index);
f32 evtSetFloat(struct EventEntry* entry, s32 index, f32 value);